# Generated by Django 2.1.2 on 2019-03-08 06:13

import ckeditor.fields
import datetime
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('school', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CSVDoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('document', models.FileField(upload_to='documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('weighting', models.FloatField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Examboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Examlevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examtype', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('notes', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('percent', models.IntegerField(blank=True, max_length=3, null=True)),
                ('maximum', models.IntegerField(blank=True, null=True)),
                ('weighted_maximum', models.IntegerField(blank=True, null=True)),
                ('weighted_percent', models.FloatField(blank=True, null=True)),
                ('updates', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='MPTTRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(blank=True, null=True)),
                ('zero_to_one', models.IntegerField(blank=True, null=True)),
                ('one_to_two', models.IntegerField(blank=True, null=True)),
                ('two_to_three', models.IntegerField(blank=True, null=True)),
                ('three_to_four', models.IntegerField(blank=True, null=True)),
                ('four_to_five', models.IntegerField(blank=True, null=True)),
                ('total_contributions', models.IntegerField(default=0)),
                ('created', models.DateTimeField(default=datetime.datetime(2019, 3, 8, 14, 13, 52, 353535))),
                ('reason', models.CharField(default='Assessment', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MPTTSyllabus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=500)),
                ('tier', models.CharField(blank=True, max_length=50, null=True)),
                ('number', models.CharField(blank=True, max_length=20, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tracker.MPTTSyllabus')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qnumber', models.CharField(max_length=100)),
                ('qorder', models.DecimalField(decimal_places=2, max_digits=6)),
                ('maxscore', models.IntegerField()),
                ('weighting', models.FloatField(default=1.0)),
                ('MPTTsyllabuspoint', mptt.fields.TreeManyToManyField(to='tracker.MPTTSyllabus')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Exam')),
            ],
        ),
        migrations.CreateModel(
            name='Sitting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datesat', models.DateField()),
                ('openForStudentRecording', models.BooleanField()),
                ('classgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.ClassGroup')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Exam')),
            ],
        ),
        migrations.CreateModel(
            name='StandardisedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('max_value', models.DecimalField(decimal_places=1, max_digits=5)),
                ('min_value', models.DecimalField(decimal_places=1, max_digits=5)),
                ('step', models.DecimalField(decimal_places=1, max_digits=5)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tracker.StandardisedData')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StandardisedResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.DecimalField(decimal_places=1, max_digits=5)),
                ('standardised_data', mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.StandardisedData')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentPointRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('type', models.CharField(default='Calculated', max_length=100)),
                ('rating', models.DecimalField(decimal_places=2, max_digits=5)),
                ('current', models.BooleanField(blank=True, default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentSubTopicRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('type', models.CharField(default='Calculated', max_length=100)),
                ('rating', models.DecimalField(decimal_places=2, max_digits=5)),
                ('current', models.BooleanField(blank=True, default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentSyllabusRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('type', models.CharField(default='Calculated', max_length=100)),
                ('rating', models.DecimalField(decimal_places=2, max_digits=5)),
                ('current', models.BooleanField(blank=True, default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentTopicRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('type', models.CharField(default='Calculated', max_length=100)),
                ('rating', models.DecimalField(decimal_places=2, max_digits=5)),
                ('current', models.BooleanField(blank=True, default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('syllabusname', models.CharField(max_length=50)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Examboard')),
                ('examtype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Examlevel')),
            ],
        ),
        migrations.CreateModel(
            name='SyllabusPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('syllabusText', models.TextField()),
                ('syllabusLevel', models.CharField(blank=True, choices=[('core', 'core'), ('extended', 'extended')], max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SyllabusSubTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_topic', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SyllabusTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=100, unique=True)),
                ('syllabus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Syllabus')),
            ],
        ),
        migrations.AddField(
            model_name='syllabussubtopic',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.SyllabusTopic'),
        ),
        migrations.AddField(
            model_name='syllabuspoint',
            name='sub_topic',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tracker.SyllabusSubTopic'),
        ),
        migrations.AddField(
            model_name='syllabuspoint',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.SyllabusTopic'),
        ),
        migrations.AddField(
            model_name='studenttopicrating',
            name='syllabus_topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.SyllabusTopic'),
        ),
        migrations.AddField(
            model_name='studentsyllabusrating',
            name='syllabus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Syllabus'),
        ),
        migrations.AddField(
            model_name='studentsubtopicrating',
            name='syllabus_sub_topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.SyllabusSubTopic'),
        ),
        migrations.AddField(
            model_name='studentpointrating',
            name='syllabus_point',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.SyllabusPoint'),
        ),
        migrations.AddField(
            model_name='question',
            name='syllabuspoint',
            field=models.ManyToManyField(blank=True, to='tracker.SyllabusPoint'),
        ),
        migrations.AddField(
            model_name='mpttsyllabus',
            name='related_point',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.SyllabusPoint'),
        ),
        migrations.AddField(
            model_name='mpttsyllabus',
            name='related_sub_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.SyllabusSubTopic'),
        ),
        migrations.AddField(
            model_name='mpttsyllabus',
            name='related_syllabus',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.Syllabus'),
        ),
        migrations.AddField(
            model_name='mpttsyllabus',
            name='related_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.SyllabusTopic'),
        ),
        migrations.AddField(
            model_name='mpttrating',
            name='assessment',
            field=models.ManyToManyField(to='tracker.Sitting'),
        ),
        migrations.AddField(
            model_name='mpttrating',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student'),
        ),
        migrations.AddField(
            model_name='mpttrating',
            name='syllabus',
            field=mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.MPTTSyllabus'),
        ),
        migrations.AddField(
            model_name='mark',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Question'),
        ),
        migrations.AddField(
            model_name='mark',
            name='sitting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Sitting'),
        ),
        migrations.AddField(
            model_name='mark',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student'),
        ),
        migrations.AddField(
            model_name='exam',
            name='syllabus',
            field=models.ManyToManyField(to='tracker.Syllabus'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('exam', 'qorder')},
        ),
        migrations.AlterUniqueTogether(
            name='mark',
            unique_together={('student', 'question', 'sitting')},
        ),
    ]
